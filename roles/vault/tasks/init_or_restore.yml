- name: Ensure required packages exists
  apt:
    name: jq
    state: present

- name: Check if already initialized
  shell: vault status --format=json | jq .initialized
  register: init_result

- name: Initialize Vault if no backup exists
  shell: |
    vault operator init -key-shares=5 -key-threshold=3 -format=json > {{ backup_dir }}/{{ init_file }}
    jq -r '.unseal_keys_b64[]' {{ backup_dir }}/{{ init_file }} > {{ backup_dir }}/{{ unseal_keys_file }}
    jq -r '.root_token' {{ backup_dir }}/{{ init_file }} > {{ backup_dir }}/{{ root_token_file }}
    chmod 600 {{ backup_dir }}/{{ init_file }}
    chmod 600 {{ backup_dir }}/{{ unseal_keys_file }}
    chmod 600 {{ backup_dir }}/{{ root_token_file }}
  args:
    executable: /bin/bash
  when: not (init_result.stdout | bool)

- name: Check if backup file exists
  stat:
    path: "{{ backup_dir }}/latest/vault.backup"
  register: vault_backup

- name: Restore Vault from backup if it exists
  shell: /usr/local/bin/restore_vault.sh
  when: vault_backup.stat.exists
  register: restore_result
  changed_when: "'restored' in restore_result.stdout"

- name: Check of sealed
  shell: vault status --format=json | jq .sealed
  register: sealed_result

- name: Unseal Vault using unseal keys
  shell: |
    head -n 3 {{ backup_dir }}/{{ unseal_keys_file }} | while read key; do
      vault operator unseal "$key"
    done
  when: sealed_result.stdout | bool
  changed_when: false

